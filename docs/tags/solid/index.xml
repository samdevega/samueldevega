<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>solid on Samuel de Vega</title>
    <link>https://www.samueldevega.com/tags/solid/</link>
    <description>Recent content in solid on Samuel de Vega</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sun, 10 Oct 2021 13:45:42 +0100</lastBuildDate><atom:link href="https://www.samueldevega.com/tags/solid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Object Oriented Pills Depende del comportamiento, no de los datos</title>
      <link>https://www.samueldevega.com/posts/object-oriented-pills-depende-del-comportamiento-no-de-los-datos/</link>
      <pubDate>Sun, 10 Oct 2021 13:45:42 +0100</pubDate>
      
      <guid>https://www.samueldevega.com/posts/object-oriented-pills-depende-del-comportamiento-no-de-los-datos/</guid>
      <description>Al programar, se puede caer en la tentación de utilizar variables para almacenar el resultado de la llamada a un método determinado. Esto es particularmente delicado cuando un método habla sobre la lógica de la aplicación.
Contexto Supongamos un formulario de acceso, el cual se compone de un email, una contraseña y el correspondiente botón de envío.
Para este punto de la aplicación se han definido las siguientes reglas:
 El email debe ser estructuralmente válido.</description>
    </item>
    
    <item>
      <title>Object Oriented Pills: Polimorfismo procedural</title>
      <link>https://www.samueldevega.com/posts/object-oriented-pills-polimorfismo-procedural/</link>
      <pubDate>Fri, 12 Mar 2021 09:00:44 +0000</pubDate>
      
      <guid>https://www.samueldevega.com/posts/object-oriented-pills-polimorfismo-procedural/</guid>
      <description>Sobre el polimorfismo en el diseño orientado a objetos Cuando hablamos de polimorfismo, nos referimos a que objetos de distintas clases sean capaces de responder a mensajes sintácticamente iguales (misma firma) independientemente de su comportamiento interno. Dependiendo del lenguaje en el que nos encontremos el polimorfismo se implementará de una forma determinada, como puede ser mediante interfaces.
Un ejemplo sencillo puede ser la respuesta a preguntar por su área a objetos cuyas clases representan las figuras geométricas de un círculo, un cuadrado y un triángulo:</description>
    </item>
    
  </channel>
</rss>
